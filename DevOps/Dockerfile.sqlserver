FROM mcr.microsoft.com/mssql/server:2022-latest
 
ENV ACCEPT_EULA=Y
ENV SA_PASSWORD=YourStrong@Passw0rd
ENV MSSQL_PID=Express
 
EXPOSE 1433
 
USER root
RUN apt-get update && apt-get install -y curl apt-transport-https gnupg && \
    curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list > /etc/apt/sources.list.d/mssql-release.list && \
    apt-get update && ACCEPT_EULA=Y apt-get install -y mssql-tools18 && \
    apt-get clean
 
# Copy SQL scripts to the container
COPY LMS/Scripts/ /docker-entrypoint-initdb.d/
 
# Create entrypoint script to initialize database and run SQL Server
RUN echo '#!/bin/bash\n\
echo "Starting SQL Server..."\n\
/opt/mssql/bin/sqlservr & \n\
echo "Waiting for SQL Server to be ready..."\n\
for i in {1..60}; do\n\
    /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -Q "SELECT 1" -C && break\n\
    echo "Waiting for SQL Server ($i/60)..."\n\
    sleep 1\n\
done\n\
if [ $i -eq 60 ]; then\n\
    echo "SQL Server failed to start."\n\
    exit 1\n\
fi\n\
echo "SQL Server is ready. Executing initialization scripts..."\n\
/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -d master -i /docker-entrypoint-initdb.d/Library.sql -C || { echo "Failed to execute LibraryManagementSystem.sql"; exit 1; }\n\
for script in /docker-entrypoint-initdb.d/*.sql; do\n\
    if [ "$(basename "$script")" != "Library.sql" ]; then\n\
        /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -d Library -i "$script" -C || { echo "Failed to execute $script"; exit 1; }\n\
    fi\n\
done\n\
echo "Initialization complete. Keeping SQL Server running..."\n\
wait' > /entrypoint.sh
 
RUN chmod +x /entrypoint.sh
 
USER mssql
ENTRYPOINT ["/entrypoint.sh"]